UseForward
//Credit goes to geeks3d.com for FXAA code
//Ported to modern OpenGL & Lunar Core by Niels Brunekreef
Vert
	in layout(location = 0) vec3 position;
	in layout(location = 1) vec2 texCoord;
	in layout(location = 2) vec3 normal;
	
	out vec4 posPos;
	
	uniform float FXAA_SUBPIX_SHIFT = 0.25;
	uniform float screenW;
	uniform float screenH;
	
	void main() {
		gl_Position = vec4(position, 1);
		vec2 uv = vec2(texCoord.x, texCoord.y);
		vec2 rcpFrame = vec2(1.0 / screenW, 1.0 / screenH);
		posPos.xy = uv;
		posPos.zw = uv - (rcpFrame * (0.5 + FXAA_SUBPIX_SHIFT));
	}
EndVert
Frag
	in vec4 posPos;

	out layout(location=0) vec4 color;
	
	uniform sampler2D t;
	uniform float screenW;
	uniform float screenH;
	
	uniform float FXAA_SPAN_MAX = 8.0;
	uniform float FXAA_REDUCE_MUL = 0.125;
	
	vec3 fxaa(){
		vec2 rcpFrame = vec2(1.0 / screenW, 1.0 / screenH);
		
		float FXAA_REDUCE_MIN = 0.0078125;
		
		//Get corners and center of this pixel
		vec3 rgbNW = textureLod(t, posPos.zw, 0.0).xyz;
		vec3 rgbNE = textureLodOffset(t, posPos.zw, 0.0, ivec2(1, 0)).xyz;
		vec3 rgbSW = textureLodOffset(t, posPos.zw, 0.0, ivec2(0, 1)).xyz;
		vec3 rgbSE = textureLodOffset(t, posPos.zw, 0.0, ivec2(1, 1)).xyz;
		vec3 rgbM = textureLod(t, posPos.xy, 0.0).xyz;
		
		//RGB to lumen conversion
		vec3 lux = vec3(0.299, 0.587, 0.114);
		
		//Convert RGB to lumen
		float luxNW = dot(rgbNW, lux);
		float luxNE = dot(rgbNE, lux);
		float luxSW = dot(rgbSW, lux);
		float luxSE = dot(rgbSE, lux);
		float luxM = dot(rgbM, lux);
		
		//Determine max/min lumen values
		float minLux = min(luxNW, min(luxNE, min(luxSW, min(luxSE, luxM))));
		float maxLux = max(luxNW, max(luxNE, max(luxSW, max(luxSE, luxM))));
		
		//Check the difference between corners in lumen
		vec2 dir;
		dir.x = -((luxNW + luxNE) - (luxSW + luxSE));
		dir.y = (luxNW + luxSW) - (luxNE + luxSE);
		
		//???
		float dirReduce = max((luxNW + luxNE + luxSW + luxSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
		float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
		dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * rcpFrame;
		
		//Compute two options with AA
		vec3 rgbA = 0.5 * (textureLod(t, posPos.xy + dir / -6.0, 0.0).xyz + textureLod(t, posPos.xy + dir / 6.0, 0.0).xyz);
		vec3 rgbB = rgbA * 0.5 + 0.25 * (textureLod(t, posPos.xy + dir * -0.5, 0.0).xyz + textureLod(t, posPos.xy + dir * 0.5, 0.0).xyz);
		
		//Get the lumen value of rgbB
		float luxB = dot(rgbB, lux);
		
		//Only return rgbB if within bounds of min/max lumen value
		if(luxB < minLux || luxB > maxLux) return rgbA;
		return rgbB;
	}
	
	void main(){
		color = vec4(fxaa(), 1);
	}
EndFrag
